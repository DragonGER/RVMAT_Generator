using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AMT_RVMATGenerator.stuff
{
    static class Writer
    {
        public static void GenerateRVMAT(RVMAT rvmat, bool overwrite)
        {
            if(File.Exists(Path.Combine(rvmat.path, rvmat.name + ".rvmat")) && !overwrite)
            {
                Console.WriteLine("Allready existing rvmat for {0} and not allowed to overwrite", rvmat.name);
                return; //if the file already exist and no overwrite is selected we don't generate a new file
            }

            try
            {
                using (var writer = new StreamWriter(Path.Combine(rvmat.path, rvmat.name + ".rvmat"), false, Encoding.UTF8))
                {
                    writer.WriteLine("//Generated by AMT RVMAT GENERATOR");
                    writer.WriteLine("//Time: {0}", DateTime.Now);
                    writer.WriteLine();
                    writer.WriteLine();

                    writer.WriteLine("#define _ARMA_");
                    writer.WriteLine("ambient[] = {0};",Properties.Data.Default.Settings.ambient);
                    writer.WriteLine("diffuse[] = {0};", Properties.Data.Default.Settings.diffuse);
                    writer.WriteLine("forcedDiffuse[] = {0};", Properties.Data.Default.Settings.forcedDiffuse);
                    writer.WriteLine("specular[] = {0};",Properties.Data.Default.Settings.specular);
                    writer.WriteLine("specularPower = {0};", Properties.Data.Default.Settings.specularPower);
                    writer.WriteLine("emmisive[] = {0};", Properties.Data.Default.Settings.emmisive);
                    writer.WriteLine("PixelShaderID = \"NormalMapDiffuse\";");
                    writer.WriteLine("VertexShaderID = \"NormalMapDiffuseAlpha\";");
                    writer.WriteLine("class Stage1");
                    writer.WriteLine("{");
                    writer.WriteLine("\ttexture = \"{0}\";", rvmat.fileNopx);
                    writer.WriteLine("\tuvSource = \"tex\";");
                    writer.WriteLine("\tclass uvTransform");
                    writer.WriteLine("\t{");
                    writer.WriteLine("\t\taside[] = {0};", Properties.Data.Default.Settings.aside);
                    writer.WriteLine("\t\tup[] = {0};", Properties.Data.Default.Settings.up);
                    writer.WriteLine("\t\tdir[] = {0};", Properties.Data.Default.Settings.dir);
                    writer.WriteLine("\t\tpos[] = {0};", Properties.Data.Default.Settings.pos);
                    writer.WriteLine("\t};");
                    writer.WriteLine("};");

                    writer.WriteLine("class Stage2");
                    writer.WriteLine("{");
                    writer.WriteLine("\ttexture = \"{0}\";", rvmat.fileCo);
                    writer.WriteLine("\tuvSource = \"tex\";");
                    writer.WriteLine("\tclass uvTransform");
                    writer.WriteLine("\t{");
                    writer.WriteLine("\t\taside[] = {5,0,0};");
                    writer.WriteLine("\t\tup[] = {0,5,0};");
                    writer.WriteLine("\t\tdir[] = {0,0,5}");
                    writer.WriteLine("\t\tpos[] = {0,0,0");
                    writer.WriteLine("\t};");
                    writer.WriteLine("};");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
        }
    }
}
